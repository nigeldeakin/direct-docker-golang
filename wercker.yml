build:
  box: alpine
  docker: true
  steps: 
    - script:
        name: Install docker
        code: apk --no-cache add docker           
    - script:
        name: Explore the docker daemon 
        code: |
          echo DOCKER_HOST=$DOCKER_HOST
          echo Running docker version
          docker version
          echo running docker ps
          docker ps
          echo running docker images
          docker images
    - script:
        name: native docker build 
        code: |
          docker build -t docker.io/$USERNAME/direct-docker-golang-$PROD_OR_STAGING:latest .
          echo running docker images
          docker images
    - script:
        name: start the newly-created image using docker run (we can't do connect to this, so this is just for show)
        code: |
          docker run --rm -d -p 5000:5000 --name container-test docker.io/$USERNAME/direct-docker-golang-$PROD_OR_STAGING:latest
          #echo running docker ps
          #docker ps
     - script: 
        name: Test the container that we started using docker-run
        code: |
            if curlOutput=`curl -s container-test:5000`; then 
                export expected="Hello World!! $BUILDID"
                if [ "$curlOutput" == "$expected" ]; then
                    echo "Test passed: container gave expected response: " $expected
                else
                    echo "Test failed: container gave unexpected response: " $curlOutput
                    echo "The expected response was: " $expected
                    exit 1
                fi   
            else 
                echo "Test failed: container did not respond"
                exit 1 
            fi           
    - script:
        name: kill the container using docker kill
        code: |
          docker kill container-test
          echo running docker ps
          docker ps
    - script:
        name: push the newly-create image to a repository
        code: |
          docker login -u $USERNAME -p $PASSWORD 
          docker push docker.io/$USERNAME/direct-docker-golang-$PROD_OR_STAGING:latest
